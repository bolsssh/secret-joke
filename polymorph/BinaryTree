using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Generics.BinaryTrees
{
    public static class BinaryTree
    {
        public static BinaryTree<T> Create<T>(params T[] values) where T : IComparable
        {
            var tree = new BinaryTree<T>();
            foreach (var value in values)
            {
                tree.Add(value);
            }

            return tree;
        }
    }

    public class BinaryTree<T> : IEnumerable<T> where T : IComparable
    {
        public T Value { get; set; }
        public BinaryTree<T> Left;
        public BinaryTree<T> Right;
        private bool valueExist;

        public void Add(T value)
        {
            if (!valueExist)
            {
                Value = value;
                valueExist = true;
                return;
            }

            if (Value.CompareTo(value) < 0)
            {
                if (Right == null)
                    Right = new BinaryTree<T>();
                Right.Add(value);
            }
            else
            {
                if (Left == null)
                    Left = new BinaryTree<T>();
                Left.Add(value);
            }
        }

        public IEnumerator<T> GetEnumerator()
        {
            if (!valueExist) yield break;
            if (Left != null)
            {
                var enumerator = Left.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    yield return enumerator.Current;
                }
            }

            yield return Value;
            if (Right != null)
            {
                var enumerator = Right.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    yield return enumerator.Current;
                }
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
